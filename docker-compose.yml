version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "new-city-topic:1:1,notifications-topic:1:1"
    networks:
      - backend
      
  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: proxy
    ports:
      - "5000:80"
    depends_on:
      - uservice_client
      - uservice_user
      - uservice_weather
    networks:
      - backend

  uservice_client:
    build: 
      context: ./uservice_client/telegram_bot
      dockerfile: Dockerfile
    container_name: uservice_client
    ports:
      - "5001:5000"
    networks:
      - backend
    environment:
    - REGISTER_USER=http://proxy:80/uservice_client/register
    - REMOVE_USER=http://proxy:80/uservice_client/remove

  uservice_user:
    build: 
      context: ./uservice_user
      dockerfile: Dockerfile
    container_name: uservice_user
    ports:
      - "5002:5000"
    depends_on:
      - kafka
    networks:
      - backend

  uservice_weather:
    build: 
      context: ./uservice_weather
      dockerfile: Dockerfile
    container_name: uservice_weather
    ports:
      - "5003:5000"
    depends_on:
      - kafka
    networks:
      - backend
    environment:
    - CITY_CONDITIONS=http://proxy:80/uservice_client/city_conditions

  uservice_notifier:
    build: 
      context: ./uservice_notifier
      dockerfile: Dockerfile
    container_name: uservice_notifier
    ports:
      - "5004:5000"
    depends_on:
      - kafka
    networks:
      - backend

  mongo_db:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: weather_report_db
    volumes:
      - Mongodb:/data/db
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - uservice_weather
      - proxy
    networks:
      - backend

volumes:
   Mongodb:

networks:
  backend:
    driver: bridge