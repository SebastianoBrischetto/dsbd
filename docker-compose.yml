version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.12-2.8.0
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "weather_topic:1:1"
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: weather_report_api_gateway
    ports:
      - "5000:80"
    depends_on:
      - telegram_bot
      - register
      - register_form
      - users_db
      - weather_data
      - data_formatter
      - cities_db
    networks:
      - mynetwork
  telegram_bot:
    build: 
      context: ./telegram_bot
      dockerfile: Dockerfile
    container_name: weather_report_telegram_bot
    ports:
      - "5001:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/
  register:
    build: 
      context: ./register
      dockerfile: Dockerfile
    container_name: weather_report_register
    ports:
      - "5002:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/
  register_form:
    build: 
      context: ./register_form
      dockerfile: Dockerfile
    container_name: weather_report_register_form
    ports:
      - "5003:5000"
    networks:
      - mynetwork
  users_db:
    build: 
      context: ./users_db
      dockerfile: Dockerfile
    container_name: weather_report_users_db
    ports:
      - "5004:5000"
    networks:
      - mynetwork
  weather_data:
    build: 
      context: ./weather_data
      dockerfile: Dockerfile
    container_name: weather_report_weather_data
    ports:
      - "5005:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/
  data_formatter:
    build: 
      context: ./data_formatter
      dockerfile: Dockerfile
    container_name: weather_report_data_formatter
    ports:
      - "5006:5000"
    networks:
      - mynetwork
    environment:
      - API_GATEWAY=http://api_gateway:80/
    depends_on:
      - kafka
  cities_db:
    build: 
      context: ./cities_db
      dockerfile: Dockerfile
    container_name: weather_report_cities_db
    ports:
      - "5007:5000"
    networks:
      - mynetwork
  remove:
    build:
      context: ./remove
      dockerfile: Dockerfile
    container_name: weather_report_remove
    ports:
      - "5008:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/
  condition_check:
    build:
      context: ./condition_check
      dockerfile: Dockerfile
    container_name: weather_report_condition_check
    ports:
      - "5009:5000"
    networks:
      - mynetwork
    environment:
      - API_GATEWAY=http://api_gateway:80/
    depends_on:
      - kafka
  mongo_db:
    image: mongo:latest
    container_name: weather_report_mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: weather_report_db
    volumes:
      - Mongodb:/data/db
    networks:
      - mynetwork
volumes:
   Mongodb:
networks:
  mynetwork:
    driver: bridge