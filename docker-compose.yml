version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: weather_report_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_JMX_PORT: 9101
    ports:
      - "22181:2181"
    networks:
      - mynetwork

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: weather_report_kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_JMX_PORT: 9101
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mynetwork
      
  api_gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: weather_report_api_gateway
    ports:
      - "5000:80"
    depends_on:
      - telegram_bot
      - register
      - register_form
      - users_db
      - weather_data
      - data_formatter
      - cities_db
    networks:
      - mynetwork

  telegram_bot:
    build: 
      context: ./client_services/telegram_bot
      dockerfile: Dockerfile
    container_name: weather_report_telegram_bot
    ports:
      - "5001:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/

  register:
    build: 
      context: ./user_interface_services/register
      dockerfile: Dockerfile
    container_name: weather_report_register
    ports:
      - "5002:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/

  register_form:
    build: 
      context: ./user_interface_services/register_form
      dockerfile: Dockerfile
    container_name: weather_report_register_form
    ports:
      - "5003:5000"
    networks:
      - mynetwork

  users_db:
    build: 
      context: ./db_services/users_db
      dockerfile: Dockerfile
    container_name: weather_report_users_db
    ports:
      - "5004:5000"
    networks:
      - mynetwork

  weather_data:
    build: 
      context: ./weather_data_acquisition_services/weather_data
      dockerfile: Dockerfile
    container_name: weather_report_weather_data
    ports:
      - "5005:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/

  data_formatter:
    build: 
      context: ./weather_data_acquisition_services/data_formatter
      dockerfile: Dockerfile
    container_name: weather_report_data_formatter
    depends_on:
      - kafka
    ports:
      - "5006:5000"
    networks:
      - mynetwork
    environment:
      - API_GATEWAY=http://api_gateway:80/

  cities_db:
    build: 
      context: ./db_services/cities_db
      dockerfile: Dockerfile
    container_name: weather_report_cities_db
    ports:
      - "5007:5000"
    networks:
      - mynetwork

  remove:
    build:
      context: ./user_interface_services/remove
      dockerfile: Dockerfile
    container_name: weather_report_remove
    ports:
      - "5008:5000"
    networks:
      - mynetwork
    environment:
    - API_GATEWAY=http://api_gateway:80/

  condition_check:
    build:
      context: ./condition_check
      dockerfile: Dockerfile
    container_name: weather_report_condition_check
    depends_on:
      - kafka
    ports:
      - "5009:5000"
    networks:
      - mynetwork
    environment:
      - API_GATEWAY=http://api_gateway:80/

  mongo_db:
    image: mongo:latest
    container_name: weather_report_mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: weather_report_db
    volumes:
      - Mongodb:/data/db
    networks:
      - mynetwork

volumes:
   Mongodb:

networks:
  mynetwork:
    driver: bridge